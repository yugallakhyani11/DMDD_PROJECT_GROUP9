-- USE MASTER
-- GO

-- IF EXISTS (SELECT name from sys.databases WHERE (name = 'DAMG6210_PROJECT'))
-- BEGIN
--     ALTER DATABASE DAMG6210_PROJECT
--     SET SINGLE_USER
--     WITH ROLLBACK IMMEDIATE;
--     DROP DATABASE DAMG6210_PROJECT;   
-- END
-- GO

CREATE DATABASE DAMG6210_PROJECT
GO

USE DAMG6210_PROJECT
GO


-- ------------------------------------------------------------------------------------------------------------------------------
-- EMPLOYEE must have a role ('Station Manager', 'Driver','Maintenance Manager','Incident Validator','Complaint Resolver','Regular') 
-- and Email ID must be Unique
-- ------------------------------------------------------------------------------------------------------------------------------

-- Function to calculate the age

IF OBJECT_ID('dbo.CalculateAge', 'FN') IS NOT NULL
    DROP FUNCTION dbo.CalculateAge;
GO
CREATE FUNCTION dbo.CalculateAge(@Birthdate DATE)
RETURNS INT
AS
BEGIN
    DECLARE @Age INT;

    -- Calculate age using DATEDIFF function
    SET @Age = DATEDIFF(YEAR, @Birthdate, GETDATE());

    RETURN @Age;
END;
GO

-- Create a new table called '[EMPLOYEE]' in schema '[dbo]'
-- Drop the table if it already exists
IF OBJECT_ID('[dbo].[EMPLOYEE]', 'U') IS NOT NULL
DROP TABLE [dbo].[EMPLOYEE]
GO
-- Create the table in the specified schema
CREATE TABLE [dbo].[EMPLOYEE]
(
   EMPLOYEE_ID INT IDENTITY(100,1) NOT NULL,
   [NAME] NVARCHAR(255),
   EMAIL_ID NVARCHAR(255) UNIQUE,
   [ROLE] NVARCHAR(255),
   BIRTHDATE DATE,
   AGE AS dbo.CalculateAge(BIRTHDATE),
   SSN VARCHAR (255) NOT NULL,
   ENCRYPTED_SSN VARBINARY(MAX),
   -- CONSTRAINT CK_EMPLOYEE_AGE CHECK (AGE >= 18),
   CONSTRAINT PK_EMPLOYEE_ID PRIMARY KEY (EMPLOYEE_ID),
   CONSTRAINT CK_EMPLOYEE_ROLE CHECK ([ROLE] IN ('Station Manager', 'Driver','Maintenance Manager','Incident Validator','Complaint Resolver','Regular'))
);
GO

--------------------------------------------------------------------------------------------------------------------------------
-- Encryption of the SSN Column for Employees
-- Keeping the SSN column as is, for future reference and to see how different the encrypted_ssn column looks like
--------------------------------------------------------------------------------------------------------------------------------
-- Creating the master key
CREATE MASTER KEY ENCRYPTION BY PASSWORD = 'DAMG6210_Project';

-- To protect the symmetric key
CREATE CERTIFICATE EMPLOYEE_SSN_CERT
WITH SUBJECT = 'EMPLOYEE SSN ENCRYPTION';

-- Creating the symmetric key
CREATE SYMMETRIC KEY EMPLOYEE_SSN_KEY
WITH ALGORITHM = AES_256
ENCRYPTION BY CERTIFICATE EMPLOYEE_SSN_CERT;


-- Encrypting the existing data in SSN column
OPEN SYMMETRIC KEY EMPLOYEE_SSN_KEY
DECRYPTION BY CERTIFICATE EMPLOYEE_SSN_CERT;

UPDATE dbo.EMPLOYEE
SET ENCRYPTED_SSN = EncryptByKey(Key_GUID('EMPLOYEE_SSN_KEY'), SSN);

CLOSE SYMMETRIC KEY EMPLOYEE_SSN_KEY;
GO


--------------------------------------------------------------------------------------------------------------------------------


--------------------------------------------------------------------------------------------------------------------------------


-- Create a new table called '[ROUTES]' in schema '[dbo]'
-- Drop the table if it already exists
IF OBJECT_ID('[dbo].[ROUTES]', 'U') IS NOT NULL
DROP TABLE [dbo].[ROUTES]
GO
-- Create the table in the specified schema
CREATE TABLE [dbo].[ROUTES]
(
    ROUTES_ID INT IDENTITY(900,1) NOT NULL,
    ROUTES_CODE VARCHAR(3) NOT NULL,
    [NAME] NVARCHAR(255),
    DISTANCE INT,
    ESTIMATED_TRAVEL_TIME TIME,
    PRICE DECIMAL(5, 2),
    CONSTRAINT PK_ROUTES_ID PRIMARY KEY (ROUTES_ID)
);
GO


--------------------------------------------------------------------------------------------------------------------------------
-- new rider is generated by unique contact information. 
-- after creation of a record, TGR_INSERT_RIDER_ACCOUNT_NO is triggered to call UDF "GenerateRiderAccountNo"
-- The UDF "GenerateRiderAccountNo"  adds prefix to Autoincremented RIDER_ID toc reate RIDER_ACCOUNT_NO 
--------------------------------------------------------------------------------------------------------------------------------

-- Function to generate unique rider account number

IF OBJECT_ID('dbo.GenerateRiderAccountNo', 'FN') IS NOT NULL
    DROP FUNCTION dbo.GenerateRiderAccountNo;
GO
CREATE FUNCTION dbo.GenerateRiderAccountNo(@RiderID BIGINT)
RETURNS VARCHAR(50)
AS
BEGIN
    RETURN CONCAT('TPASS', CAST(@RiderID AS VARCHAR(20)));
END;
GO

-- Create a new table called '[RIDER]' in schema '[dbo]'
-- Drop the table if it already exists
IF OBJECT_ID('[dbo].[RIDER]', 'U') IS NOT NULL
DROP TABLE [dbo].[RIDER]
GO
-- Create the table in the specified schema
CREATE TABLE [dbo].[RIDER]
(
    [RIDER_ID] INT IDENTITY(100000,1) NOT NULL,
    [RIDER_ACCOUNT_NO] [varchar](50) NULL,
    [CONTACT_INFORMATION] BIGINT NOT NULL UNIQUE, 
    [RIDER_STATUS] [varchar](25) NULL,
    CONSTRAINT [PK_RIDER] PRIMARY KEY CLUSTERED ([RIDER_ID] ASC),
    CONSTRAINT [CK_CONTACT_INFO] CHECK (LEN(CONVERT(NVARCHAR(255), [CONTACT_INFORMATION])) = 10)
);
GO

--Trigger to insert the rider account number
IF OBJECT_ID('[dbo].[TGR_INSERT_RIDER_ACCOUNT_NO]', 'TR') IS NOT NULL
DROP TRIGGER [dbo].[TGR_INSERT_RIDER_ACCOUNT_NO]
GO
CREATE TRIGGER TGR_INSERT_RIDER_ACCOUNT_NO
ON [dbo].[RIDER]
AFTER INSERT
AS
BEGIN
    UPDATE r
    SET r.[RIDER_ACCOUNT_NO] = dbo.GenerateRiderAccountNo(i.[RIDER_ID])
    FROM [dbo].[RIDER] r
    INNER JOIN inserted i ON r.[RIDER_ID] = i.[RIDER_ID];
END;
GO
--------------------------------------------------------------------------------------------------------------------------------

-- Create a new table called '[TRANSIT_CARD]' in schema '[dbo]'
-- Drop the table if it already exists
IF OBJECT_ID('[dbo].[TRANSIT_CARD]', 'U') IS NOT NULL
DROP TABLE [dbo].[TRANSIT_CARD]
GO
-- Create the table in the specified schema
CREATE TABLE [dbo].[TRANSIT_CARD]
(
    [CARD_ID]  INT IDENTITY(227300000,1) NOT NULL,
    [BALANCE] [decimal](18, 2) NOT NULL,
    [RIDER_ID] [int] NOT NULL,
    [CARD_EXPIRY_DATE] [date] NOT NULL,
    [CARD_ACTIVE_STATUS] [bit] NOT NULL,
    CONSTRAINT [PK_TRANSIT_CARD] PRIMARY KEY CLUSTERED ([CARD_ID] ASC),
    CONSTRAINT FK_TRANSIT_CARD_RIDER FOREIGN KEY (RIDER_ID) REFERENCES  [dbo].[RIDER](RIDER_ID),
) ;
GO

--------------------------------------------------------------------------------------------------------------------------------

-- Create a new table called '[DRIVER]' in schema '[dbo]'
-- Drop the table if it already exists
IF OBJECT_ID('[dbo].[DRIVER]', 'U') IS NOT NULL
DROP TABLE [dbo].[DRIVER]
GO
-- Create the table in the specified schema
CREATE TABLE [dbo].[DRIVER]
(
    DRIVER_ID INT NOT NULL, 
    LICENSE_NO NVARCHAR(50),
	LICENCSE_EXPIRYDATE DATE,
    CONSTRAINT PK_DRIVER_ID PRIMARY KEY (DRIVER_ID),
    CONSTRAINT FK_DRIVER_ID FOREIGN KEY (DRIVER_ID) REFERENCES EMPLOYEE(EMPLOYEE_ID)
);
GO

--------------------------------------------------------------------------------------------------------------------------------

IF OBJECT_ID('[dbo].[STATION]', 'U') IS NOT NULL
DROP TABLE [dbo].[STATION]
GO
-- Create the table in the specified schema
CREATE TABLE [dbo].[STATION]
(
    STATION_ID INT IDENTITY(700,1) NOT NULL, 
    [NAME] NVARCHAR(255),
    [LOCATION] NVARCHAR(255),
    STATION_MANAGER_ID INT,
    CONSTRAINT PK_STATION_ID PRIMARY KEY (STATION_ID),
    CONSTRAINT FK_STATION_MANAGER FOREIGN KEY (STATION_MANAGER_ID) REFERENCES EMPLOYEE(EMPLOYEE_ID)
);
GO

--------------------------------------------------------------------------------------------------------------------------------

-- Create a new table called '[TRAIN]' in schema '[dbo]'
-- Drop the table if it already exists
IF OBJECT_ID('[dbo].[TRAIN]', 'U') IS NOT NULL
DROP TABLE [dbo].[TRAIN]
GO
-- Create the table in the specified schema
CREATE TABLE [dbo].[TRAIN]
(
    TRAIN_ID INT IDENTITY(8700,1) NOT NULL,
    [TYPE] NVARCHAR(255),
    REGISTRATION_NUMBER NVARCHAR(50),
    CAPACITY INT,
    MAINTENANCE_STATUS NVARCHAR(50),
    CONSTRAINT PK_TRAIN_ID PRIMARY KEY (TRAIN_ID)
);
GO

--------------------------------------------------------------------------------------------------------------------------------

-- Create a new table called '[SCHEDULE]' in schema '[dbo]'
-- Drop the table if it already exists
IF OBJECT_ID('[dbo].[SCHEDULE]', 'U') IS NOT NULL
DROP TABLE [dbo].[SCHEDULE]
GO
-- Create the table in the specified schema
CREATE TABLE [dbo].[SCHEDULE]
(
    SCHEDULE_ID INT IDENTITY(724000,1),
    TRAIN_ID INT NOT NULL,
    DRIVER_ID INT NOT NULL,
    DAY_OF_WEEK NVARCHAR(50) NOT NULL,
    CONSTRAINT PK_SCHEDULE_ID PRIMARY KEY (SCHEDULE_ID),
    CONSTRAINT FK_Driver_Train FOREIGN KEY (DRIVER_ID) REFERENCES EMPLOYEE(EMPLOYEE_ID),
    CONSTRAINT FK_TRAIN_SCHEDULE FOREIGN KEY (Train_ID) REFERENCES TRAIN(TRAIN_ID)
);
GO


--------------------------------------------------------------------------------------------------------------------------------
-- Create a new table called '[ROUTE_SCHEDULE_PER_STATION]' in schema '[dbo]'
-- Drop the table if it already exists
IF OBJECT_ID('[dbo].[ROUTE_SCHEDULE_PER_STATION]', 'U') IS NOT NULL
DROP TABLE [dbo].[ROUTE_SCHEDULE_PER_STATION]
GO
-- Create the table in the specified schema
CREATE TABLE [dbo].[ROUTE_SCHEDULE_PER_STATION]
(
    RSS_ID INT IDENTITY(77770000,1),
    ROUTES_ID INT NOT NULL,
    STATION_ID INT NOT NULL,
    SCHEDULE_ID INT NOT NULL,
    ARRIVAL_TIME TIME,
    DEPARTURE_TIME TIME,
    STATION_ORDER INT,
    CONSTRAINT PK_RSS_ID PRIMARY KEY (RSS_ID),
    CONSTRAINT FK_RSS_ID FOREIGN KEY (ROUTES_ID) REFERENCES ROUTES(ROUTES_ID),
    CONSTRAINT FK_STUDENT_ID FOREIGN KEY (STATION_ID) REFERENCES STATION(STATION_ID),
    CONSTRAINT FK_SCHEDULE_ID FOREIGN KEY (SCHEDULE_ID) REFERENCES [SCHEDULE](SCHEDULE_ID)
);
GO

--------------------------------------------------------------------------------------------------------------------------------

-- Create a new table called '[COMPLIANTS]' in schema '[dbo]'
-- Drop the table if it already exists
IF OBJECT_ID('[dbo].[COMPLAINTS]', 'U') IS NOT NULL
DROP TABLE [dbo].[COMPLAINTS]
GO
-- Create the table in the specified schema
CREATE TABLE [dbo].[COMPLAINTS]
(
    COMPLAINT_ID INT IDENTITY(1,1) NOT NULL,
    COMPLAINT_DESCRIPTION VARCHAR(255) NOT NULL,
    COMPLAINT_TIMESTAMP DATETIME NOT NULL,
    RIDER_ID INT NOT NULL,
    RESOLUTION_STATUS VARCHAR(20) DEFAULT 'Pending',
    CONSTRAINT PK_COMPLAINT_ID PRIMARY KEY (COMPLAINT_ID),
    CONSTRAINT FK_COMPLAINTS_RIDER_ACCOUNT_NO FOREIGN KEY (RIDER_ID) REFERENCES [dbo].[RIDER](RIDER_ID)
);
GO

--------------------------------------------------------------------------------------------------------------------------------

--Trigger to ensure only the existing riders can add the complaints
IF OBJECT_ID('[dbo].[TGR_VALIDATE_RIDER_BEFORE_ADDING_COMPLAINT]', 'TR') IS NOT NULL
DROP TRIGGER [dbo].[TGR_VALIDATE_RIDER_BEFORE_ADDING_COMPLAINT]
GO
CREATE TRIGGER TGR_VALIDATE_RIDER_BEFORE_ADDING_COMPLAINT
ON [dbo].[COMPLAINTS]
INSTEAD OF INSERT
AS
BEGIN

    IF NOT EXISTS (
        SELECT 1 FROM [dbo].[RIDER]
        WHERE RIDER_ID IN (SELECT RIDER_ID FROM inserted)
    )
    BEGIN
        RAISERROR ('Cannot add complaint. Rider ID does not exist.', 16, 1);
        RETURN;
    END

    INSERT INTO [dbo].[COMPLAINTS] (COMPLAINT_DESCRIPTION, COMPLAINT_TIMESTAMP, RIDER_ID, RESOLUTION_STATUS)
    SELECT COMPLAINT_DESCRIPTION, COMPLAINT_TIMESTAMP, RIDER_ID, RESOLUTION_STATUS
    FROM inserted;
END;
GO

--------------------------------------------------------------------------------------------------------------------------------

--Stored Procedure to check the status of the complaint
IF OBJECT_ID('[dbo].[STR_PROC_GET_COMPLAINT_STATUS]', 'P') IS NOT NULL
DROP PROCEDURE [dbo].[STR_PROC_GET_COMPLAINT_STATUS]
GO
CREATE PROCEDURE STR_PROC_GET_COMPLAINT_STATUS
    @RiderID INT,
    @ComplaintID INT,
    @ComplaintDescription NVARCHAR(1000),
    @OutputMessage NVARCHAR(255) OUTPUT
AS
BEGIN
    
    IF NOT EXISTS (
        SELECT 1 FROM [dbo].[RIDER]
        WHERE RIDER_ID = @RiderID
    )
    BEGIN
        SET @OutputMessage = 'Unauthorized, Rider ID not found';
        RETURN;
    END

    IF NOT EXISTS (
        SELECT 1 FROM [dbo].[COMPLAINTS]
        WHERE COMPLAINT_ID = @ComplaintID
          AND RIDER_ID = @RiderID
    )
    BEGIN
        SET @OutputMessage = 'Complaint not found';
        RETURN;
    END

    SELECT @OutputMessage = RESOLUTION_STATUS 
    FROM [dbo].[COMPLAINTS]
    WHERE COMPLAINT_ID = @ComplaintID
      AND RIDER_ID = @RiderID;
END;
GO

-- Example to check the status of the complaint
-- DECLARE @OutputMessage NVARCHAR(255);
-- EXEC STR_PROC_GET_COMPLAINT_STATUS 
--     @RiderID = 100002, 
--     @ComplaintID = 1,
--     @ComplaintDescription = 'Something',
--     @OutputMessage = @OutputMessage OUTPUT;

-- PRINT @OutputMessage;
--------------------------------------------------------------------------------------------------------------------------------
-- By default when the complaint is added the status is set to "Pending"
-- It will change to "Resolved" only when a record is added in complaints response table with a response description
-- We can check the status of the complaint py providing the Rider ID, Complaint ID and Description
--------------------------------------------------------------------------------------------------------------------------------

-- Create a new table called '[COMPLIANTS_RESPONSE]' in schema '[dbo]'
-- Drop the table if it already exists
IF OBJECT_ID('[dbo].[COMPLAINTS_RESPONSE]', 'U') IS NOT NULL
DROP TABLE [dbo].[COMPLAINTS_RESPONSE]
GO
-- Create the table in the specified schema
CREATE TABLE [dbo].[COMPLAINTS_RESPONSE]
(
    RESPONSE_ID INT IDENTITY(1,1) NOT NULL,
    COMPLAINT_ID INT NOT NULL,
    RESPONSE_TIMESTAMP DATETIME NOT NULL,
    RESPONSE_DESCRIPTION NVARCHAR(255) NOT NULL,
    RESOLVED_BY INT NOT NULL,
    CONSTRAINT PK_RESPONSE_ID PRIMARY KEY (RESPONSE_ID),
    CONSTRAINT FK_RESPONSE_COMPLAINT_ID FOREIGN KEY (COMPLAINT_ID) REFERENCES [dbo].[COMPLAINTS] (COMPLAINT_ID),
    CONSTRAINT FK_RESPONSE_EMPLOYEE_ID FOREIGN KEY (RESOLVED_BY) REFERENCES [dbo].[EMPLOYEE] (EMPLOYEE_ID)
);
GO

--------------------------------------------------------------------------------------------------------------------------------

-- Trigger to update the resolution status automatically
IF OBJECT_ID('[dbo].[TGR_UPDATE_COMPLAINT_STATUS]', 'TR') IS NOT NULL
DROP TRIGGER [dbo].[TGR_UPDATE_COMPLAINT_STATUS]
GO
CREATE TRIGGER TGR_UPDATE_COMPLAINT_STATUS
ON [dbo].[COMPLAINTS_RESPONSE]
AFTER INSERT, UPDATE
AS
BEGIN
    DECLARE @ComplaintId INT, @ResolverRole NVARCHAR(255), @ResponseDescription NVARCHAR(255);
    SELECT 
        @ComplaintId = i.COMPLAINT_ID,
        @ResolverRole = e.ROLE,
        @ResponseDescription = i.RESPONSE_DESCRIPTION
    FROM 
        inserted i
    INNER JOIN 
        [dbo].[EMPLOYEE] e ON i.RESOLVED_BY = e.EMPLOYEE_ID
    WHERE 
        e.ROLE = 'Complaint Resolver';

    IF (@ResponseDescription IS NOT NULL AND @ResponseDescription <> '')
    BEGIN
        UPDATE [dbo].[COMPLAINTS]
        SET RESOLUTION_STATUS = 'Resolved'
        WHERE COMPLAINT_ID = @ComplaintId;
    END
END;
GO

--------------------------------------------------------------------------------------------------------------------------------

-- Trigger to check that the complaints are only resolved by the employees whose role is 'Complaint Resolver'
IF OBJECT_ID('[dbo].[TGR_CHECK_RESOLVER_ROLE]', 'TR') IS NOT NULL
DROP TRIGGER [dbo].[TGR_CHECK_RESOLVER_ROLE]
GO
CREATE TRIGGER TGR_CHECK_RESOLVER_ROLE
ON [dbo].[COMPLAINTS_RESPONSE]
AFTER INSERT, UPDATE
AS
BEGIN
    IF NOT EXISTS (
        SELECT * FROM [dbo].[EMPLOYEE]
        WHERE EMPLOYEE_ID IN (SELECT RESOLVED_BY FROM inserted)
        AND ROLE = 'Complaint Resolver'
    )
    BEGIN
        RAISERROR ('Only existing employees with the role of "Complaint Resolver" can resolve complaints.', 16, 1);
        ROLLBACK TRANSACTION;
    END
END;
GO

--------------------------------------------------------------------------------------------------------------------------------

-- Stored Procedure to add the complaint response
IF OBJECT_ID('[dbo].[STR_PROC_ADD_COMPLAINT_RESPONSE]', 'P') IS NOT NULL
DROP PROCEDURE [dbo].[STR_PROC_ADD_COMPLAINT_RESPONSE]
GO
CREATE PROCEDURE STR_PROC_ADD_COMPLAINT_RESPONSE
    @ComplaintID INT,
    @ResponseTimestamp DATETIME,
    @ResponseDescription NVARCHAR(255),
    @ResolvedBy INT
AS
BEGIN
    IF NOT EXISTS (SELECT 1 FROM [dbo].[EMPLOYEE] WHERE EMPLOYEE_ID = @ResolvedBy)
    BEGIN
        RAISERROR ('Employee ID does not exist.', 16, 1);
        RETURN;
    END

    IF EXISTS (SELECT 1 FROM [dbo].[COMPLAINTS] WHERE COMPLAINT_ID = @ComplaintID)
    BEGIN
        INSERT INTO [dbo].[COMPLAINTS_RESPONSE] (COMPLAINT_ID, RESPONSE_TIMESTAMP, RESPONSE_DESCRIPTION, RESOLVED_BY)
        VALUES (@ComplaintID, @ResponseTimestamp, @ResponseDescription, @ResolvedBy);
    END
    ELSE
    BEGIN
        RAISERROR ('Complaint ID does not exist.', 16, 1);
    END
END;
GO
--------------------------------------------------------------------------------------------------------------------------------

-- Example to check to add the complaint response
-- EXEC STR_PROC_ADD_COMPLAINT_RESPONSE 
--     @ComplaintID = 1,
--     @ResponseTimestamp = '2023-01-01 10:00:00', 
--     @ResponseDescription = 'Solved',
--     @ResolvedBy = 132;

--------------------------------------------------------------------------------------------------------------------------------
-- new complaints are raised uniquely. 
-- after creation of a complaint, TGR_CHECK_RESOLVER_ROLE is triggered to check if the complaint is resolved only by 'existing complaint resolvers'
-- the trigger will check while inserting or updating the data.
--------------------------------------------------------------------------------------------------------------------------------



-- Create a new table called 'TRANSACTION' in schema '[dbo]'
-- Drop the table if it already exists
IF OBJECT_ID('[dbo].[TRANSACTION]', 'U') IS NOT NULL
DROP TABLE [dbo].[TRANSACTION]
GO
-- Create the table in the specified schema
CREATE TABLE [dbo].[TRANSACTION]
(
TRANSACTION_ID BIGINT IDENTITY(22200000000000,1),
TRANSACTION_TIMESTAMP DATETIME,
TRANSACTION_TYPE VARCHAR(255),
CARD_ID INT,
STATION_ID INT,
CONSTRAINT [PK_TRANSACTION_ID] PRIMARY KEY CLUSTERED ([TRANSACTION_ID] ASC),
CONSTRAINT FK_TRANSIT_CARD FOREIGN KEY (CARD_ID) REFERENCES [dbo].[TRANSIT_CARD](CARD_ID),
CONSTRAINT FK_STATION FOREIGN KEY (STATION_ID) REFERENCES [dbo].[STATION](STATION_ID),
CONSTRAINT CK_TRANSACTION_TYPE CHECK ([TRANSACTION_TYPE] IN ('Recharge', 'Journey'))
);
GO

--------------------------------------------------------------------------------------------------------------------------------
-- TRANSACTION_TABLE includes TRANSACTION_ID as the primary key, foreign keys CARD_ID and STATION_ID referencing other tables
--------------------------------------------------------------------------------------------------------------------------------

-- Create a new table called '[JOURNEY_TRANSACTION]' in schema '[dbo]'
-- Drop the table if it already exists
IF OBJECT_ID('[dbo].[JOURNEY_TRANSACTION]', 'U') IS NOT NULL
DROP TABLE [dbo].[JOURNEY_TRANSACTION]
GO
-- Create the table in the specified schema
CREATE TABLE [dbo].[JOURNEY_TRANSACTION]
(
   TRANSACTION_ID BIGINT,
   ROUTES_ID INT,
   CONSTRAINT PK_JOURNEY_TRANSACTION_ID PRIMARY KEY CLUSTERED ([TRANSACTION_ID] ASC),
   CONSTRAINT FK_JOURNEY_TRANSACTION_ID FOREIGN KEY (TRANSACTION_ID) REFERENCES [dbo].[TRANSACTION](TRANSACTION_ID),
   CONSTRAINT FK_ROUTE_ID FOREIGN KEY (ROUTES_ID) REFERENCES [dbo].[ROUTES](ROUTES_ID)
);
GO

--------------------------------------------------------------------------------------------------------------------------------

-- Create a new table called '[RECHARGE_TRANSACTION]' in schema '[dbo]'
-- Drop the table if it already exists
IF OBJECT_ID('[dbo].[RECHARGE_TRANSACTION]', 'U') IS NOT NULL
DROP TABLE [dbo].[RECHARGE_TRANSACTION]
GO
-- Create the table in the specified schema
CREATE TABLE [dbo].[RECHARGE_TRANSACTION]
(
   PAYMENT_ID BIGINT,
   RECHARGE_AMOUNT DECIMAL(10, 2),
   PAYMENT_METHOD VARCHAR(255),
   CONSTRAINT PK_RECHARGE_TRANSACTION_ID PRIMARY KEY  CLUSTERED ([PAYMENT_ID] ASC),
   CONSTRAINT FK_RECHARGE_TRANSACTION_ID FOREIGN KEY (PAYMENT_ID) REFERENCES [dbo].[TRANSACTION](TRANSACTION_ID),
   CONSTRAINT CK_PAYMENT_METHOD CHECK ([PAYMENT_METHOD] IN ('Credit Card','Cash', 'Debit Card'))
);
GO

--------------------------------------------------------------------------------------------------------------------------------
-- Incident Type can be either from one of these only (Technical, On-site, On-road, Security) 
--------------------------------------------------------------------------------------------------------------------------------

-- Create a new table called '[INCIDENTS]' in schema '[dbo]'
-- Drop the table if it already exists
IF OBJECT_ID('[dbo].[INCIDENTS]', 'U') IS NOT NULL
DROP TABLE [dbo].[INCIDENTS]
GO
-- Create the table in the specified schema
CREATE TABLE [dbo].[INCIDENTS]
(
   INCIDENT_ID INT IDENTITY(1,1) NOT NULL,
   [TYPE] NVARCHAR(255) NOT NULL,
   INCIDENT_TIMESTAMP DATETIME NOT NULL,
   INCIDENT_DESCRIPTION NVARCHAR(1000) NULL,
   EMPLOYEE_INVOLVED INT NOT NULL,
   VEHICLE_INVOLVED INT NULL,
   CONSTRAINT PK_INCIDENT_ID PRIMARY KEY (INCIDENT_ID),
   CONSTRAINT FK_INCIDENT_EMPLOYEE FOREIGN KEY (EMPLOYEE_INVOLVED) REFERENCES [dbo].[EMPLOYEE] (EMPLOYEE_ID),
   CONSTRAINT FK_INCIDENT_VEHICLE FOREIGN KEY (VEHICLE_INVOLVED) REFERENCES [dbo].[TRAIN] (TRAIN_ID),
   CONSTRAINT CK_INCIDENT_TYPE CHECK ([TYPE] IN ('Technical', 'On-site', 'On-road', 'Security'))
);
GO

--------------------------------------------------------------------------------------------------------------------------------

-- Creating a Non-Clustered Index for the incidents on Incident_Timestamp to make the search more optimised
DROP INDEX IF EXISTS IDX_INCIDENT_TIMESTAMP ON [dbo].[INCIDENTS];
GO
CREATE NONCLUSTERED INDEX IDX_INCIDENT_TIMESTAMP
ON [dbo].[INCIDENTS] (INCIDENT_TIMESTAMP);

--------------------------------------------------------------------------------------------------------------------------------

--View to look all the incidents that took place on a particular day
IF OBJECT_ID('[dbo].[VIEW_INCIDENTS_BY_DATE]', 'V') IS NOT NULL
    DROP VIEW [dbo].[VIEW_INCIDENTS_BY_DATE];
GO

CREATE VIEW VIEW_INCIDENTS_BY_DATE AS
SELECT 
    INCIDENT_ID, 
    [TYPE], 
    INCIDENT_TIMESTAMP, 
    INCIDENT_DESCRIPTION, 
    EMPLOYEE_INVOLVED, 
    VEHICLE_INVOLVED
FROM 
    [dbo].[INCIDENTS];
GO

-- Example to View the incidents
-- SELECT * FROM VIEW_INCIDENTS_BY_DATE
-- WHERE CAST(INCIDENT_TIMESTAMP AS DATE) = '2023-11-25';  


-----------------------------------------------------------------------------------------------------------------
-- Create a new table called '[MAINTENANCE]' in schema '[dbo]'
-- Drop the table if it already exists
IF OBJECT_ID('[dbo].[MAINTENANCE]', 'U') IS NOT NULL
DROP TABLE [dbo].[MAINTENANCE]
GO
-- Create the table in the specified schema
CREATE TABLE [dbo].[MAINTENANCE]
(
    CARD_ID INT IDENTITY(40000,1) NOT NULL, 
	TRAIN_ID INT,
	PERSON_INCHARGE INT,
	[DATE] DATE,
	[DESCRIPTION] NVARCHAR(255),
	TYPE_OF_MAINTENANCE NVARCHAR(255),
    CONSTRAINT PK_CARD_ID PRIMARY KEY (CARD_ID),
	CONSTRAINT FK_TRAIN_ID FOREIGN KEY (TRAIN_ID) REFERENCES TRAIN(TRAIN_ID),
	CONSTRAINT FK_PERSON_INCHARGE FOREIGN KEY (PERSON_INCHARGE) REFERENCES EMPLOYEE(EMPLOYEE_ID),
	CONSTRAINT CK_MAINTENANCE_TYPE CHECK ([TYPE_OF_MAINTENANCE] IN ('Regular Maintenance', 'Accidental Maintenance'))
);
GO

-----------------------------------------------------------------------------------------------------------------


USE MASTER 
GO